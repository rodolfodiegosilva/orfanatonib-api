import {
  Controller,
  Get,
  Post,
  Body,
  Param,
  Put,
  Delete,
  UseGuards,
  Logger,
} from '@nestjs/common';
import { UserService } from './user.service';
import { CreateUserDto } from './dto/create-user.dto';
import { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';
import { RoleGuard } from 'src/auth/guards/role-guard';

@Controller('users')
export class UserController {
  private readonly logger = new Logger(UserController.name);

  constructor(private readonly userService: UserService) {}

  @Post()
  async create(@Body() dto: CreateUserDto) {
    this.logger.debug('üì• [POST /users] Criando novo usu√°rio');
    const result = await this.userService.create(dto);
    this.logger.log(`‚úÖ Usu√°rio criado: ID=${result.id}`);
    return result;
  }

  @Get()
  async findAll() {
    this.logger.debug('üìÑ [GET /users] Listando todos os usu√°rios');
    return this.userService.findAll();
  }

  @Get(':id')
  async findOne(@Param('id') id: string) {
    this.logger.debug(`üîç [GET /users/${id}] Buscando usu√°rio`);
    return this.userService.findOne(id);
  }

  @UseGuards(JwtAuthGuard, RoleGuard)
  @Put(':id')
  async update(@Param('id') id: string, @Body() dto: Partial<CreateUserDto>) {
    this.logger.debug(`‚úèÔ∏è [PUT /users/${id}] Atualizando usu√°rio`);
    const result = await this.userService.update(id, dto);
    this.logger.log(`‚úÖ Usu√°rio atualizado: ID=${id}`);
    return result;
  }

  @UseGuards(JwtAuthGuard, RoleGuard)
  @Delete(':id')
  async remove(@Param('id') id: string) {
    this.logger.debug(`üóëÔ∏è [DELETE /users/${id}] Removendo usu√°rio`);
    await this.userService.remove(id);
    this.logger.log(`‚úÖ Usu√°rio removido: ID=${id}`);
    return { message: 'Usu√°rio removido com sucesso' };
  }
}
