const axios = require('axios');

// Configura√ß√µes
const BASE_URL = 'http://localhost:3000';
const ADMIN_CREDENTIALS = {
  email: 'joao@example.com',
  password: 'password123'
};

let token = '';

async function login() {
  console.log('üîê Fazendo login como admin...');
  try {
    const response = await axios.post(`${BASE_URL}/auth/login`, ADMIN_CREDENTIALS);
    token = response.data.accessToken;
    console.log('‚úÖ Login realizado com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro no login:', error.response?.data || error.message);
    return false;
  }
}

async function getAvailableShelters() {
  console.log('üè† Obtendo shelters dispon√≠veis...');
  try {
    const response = await axios.get(`${BASE_URL}/shelters?limit=50`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    const shelters = response.data.data || response.data.items || [];
    console.log(`‚úÖ ${shelters.length} shelters encontrados`);
    return shelters;
  } catch (error) {
    console.error('‚ùå Erro ao obter shelters:', error.response?.status);
    return [];
  }
}

async function createSheltered(shelteredData, shelterId) {
  try {
    const response = await axios.post(`${BASE_URL}/sheltered`, {
      ...shelteredData,
      shelterId: shelterId
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });

    return response.data;
  } catch (error) {
    throw error;
  }
}

async function createShelteredData() {
  console.log('üéØ AUTOMA√á√ÉO DE CRIA√á√ÉO DE SHELTERED PARA PAGELAS');
  console.log('==================================================');
  console.log('üìã Criando sheltered com shelters v√°lidos...');

  if (!await login()) {
    console.log('‚ùå Falha no login. Abortando cria√ß√£o de dados.');
    return;
  }

  // Obter shelters dispon√≠veis
  const shelters = await getAvailableShelters();
  
  if (shelters.length === 0) {
    console.log('‚ö†Ô∏è Nenhum shelter encontrado para criar sheltered');
    return;
  }

  console.log(`üìä Shelters dispon√≠veis: ${shelters.length}`);

  // Dados de sheltered para criar
  const shelteredNames = [
    'Ana Silva', 'Bruno Santos', 'Carlos Oliveira', 'Diana Costa', 'Eduardo Lima',
    'Fernanda Rocha', 'Gabriel Alves', 'Helena Pereira', 'Igor Martins', 'Julia Ferreira',
    'Kleber Souza', 'Larissa Barbosa', 'Marcos Dias', 'Nat√°lia Campos', 'Ot√°vio Nunes',
    'Patr√≠cia Vieira', 'Rafael Mendes', 'Sandra Gomes', 'Thiago Ramos', 'Vanessa Lopes'
  ];

  const createdSheltered = [];
  const errors = [];

  console.log('\nüèóÔ∏è Criando sheltered...');

  for (let i = 0; i < Math.min(shelteredNames.length, 20); i++) {
    const name = shelteredNames[i];
    const shelter = shelters[i % shelters.length]; // Rotacionar entre shelters
    
    // Calcular data de nascimento (idade entre 5 e 14 anos)
    const age = Math.floor(Math.random() * 10) + 5;
    const currentYear = new Date().getFullYear();
    const birthYear = currentYear - age;
    const birthMonth = Math.floor(Math.random() * 12) + 1;
    const birthDay = Math.floor(Math.random() * 28) + 1;
    const birthDate = `${birthYear}-${birthMonth.toString().padStart(2, '0')}-${birthDay.toString().padStart(2, '0')}`;
    
    const shelteredData = {
      name: name,
      birthDate: birthDate,
      gender: Math.random() > 0.5 ? 'Masculino' : 'Feminino',
      guardianName: Math.random() > 0.3 ? `Guardi√£o de ${name}` : undefined, // 70% t√™m guardi√£o
      guardianPhone: Math.random() > 0.3 ? `+5511${Math.floor(Math.random() * 900000000) + 100000000}` : undefined
    };

    try {
      console.log(`üìù Criando sheltered ${i + 1}/20: ${name}...`);
      console.log(`   üè† Shelter: ${shelter.name} (${shelter.id})`);
      
      const sheltered = await createSheltered(shelteredData, shelter.id);
      
      createdSheltered.push(sheltered);
      console.log(`   ‚úÖ Sheltered criado - ID: ${sheltered.id}`);
      console.log(`   üë∂ Nome: ${sheltered.name}, Idade: ${sheltered.age}`);
      
      // Pequena pausa para evitar sobrecarga
      await new Promise(resolve => setTimeout(resolve, 200));
      
    } catch (error) {
      const errorMsg = error.response?.data?.message || error.message;
      console.error(`   ‚ùå Erro ao criar sheltered ${name}:`, errorMsg);
      errors.push({ name, error: errorMsg });
    }
  }

  // Salvar resultados
  const results = {
    created_at: new Date().toISOString(),
    total_created: createdSheltered.length,
    total_errors: errors.length,
    sheltered: createdSheltered,
    errors: errors,
    summary: {
      shelters_used: shelters.slice(0, 20).map(s => ({ id: s.id, name: s.name })),
      success_rate: `${((createdSheltered.length / shelteredNames.length) * 100).toFixed(1)}%`
    }
  };

  const fs = require('fs');
  const filename = `docs/results/sheltered/created-sheltered-for-pagelas-${new Date().toISOString().split('T')[0]}.json`;
  fs.writeFileSync(filename, JSON.stringify(results, null, 2));

  console.log('\nüéâ AUTOMA√á√ÉO DE CRIA√á√ÉO CONCLU√çDA!');
  console.log('==================================');
  console.log(`‚úÖ Total de sheltered criados: ${createdSheltered.length}`);
  console.log(`‚ùå Total de erros: ${errors.length}`);
  console.log(`üìÅ Arquivo salvo: ${filename}`);
  console.log(`üìä Taxa de sucesso: ${results.summary.success_rate}`);
  
  if (errors.length > 0) {
    console.log('\n‚ùå Erros encontrados:');
    errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error.name}: ${error.error}`);
    });
  }

  return createdSheltered;
}

// Executar automa√ß√£o
createShelteredData().catch(console.error);
