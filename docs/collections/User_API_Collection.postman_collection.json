{
	"info": {
		"_postman_id": "user-api-collection",
		"name": "User API Collection",
		"description": "Collection para todos os endpoints do User Controller - Atualizada com ambiente unificado",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create User",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{test_user_name}}\",\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_user_password}}\",\n  \"phone\": \"{{test_user_phone}}\",\n  \"role\": \"{{user_role}}\",\n  \"completed\": true,\n  \"commonUser\": false,\n  \"active\": true\n}"
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "Endpoint para criar um novo usuário (requer autenticação de admin)"
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar se a resposta foi bem-sucedida",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Verificar se a resposta contém dados do usuário",
							"pm.test(\"Response has user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.exist;",
							"    pm.expect(jsonData.name).to.exist;",
							"    pm.expect(jsonData.email).to.exist;",
							"});",
							"",
							"// Salvar ID do usuário criado para uso posterior",
							"if (pm.response.code === 201) {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"created_user_id\", jsonData.id);",
							"    ",
							"    console.log(\"Usuário criado com sucesso!\");",
							"    console.log(\"ID: \" + jsonData.id);",
							"    console.log(\"Nome: \" + jsonData.name);",
							"    console.log(\"Email: \" + jsonData.email);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": [
				{
					"name": "Create User Success",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"João Silva\",\n  \"email\": \"joao.silva@example.com\",\n  \"password\": \"password123\",\n  \"phone\": \"+5511999999999\",\n  \"role\": \"teacher\",\n  \"completed\": true,\n  \"commonUser\": false,\n  \"active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"id\": \"user_id_here\",\n  \"name\": \"João Silva\",\n  \"email\": \"joao.silva@example.com\",\n  \"phone\": \"+5511999999999\",\n  \"role\": \"teacher\",\n  \"active\": true,\n  \"completed\": true,\n  \"commonUser\": false,\n  \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n  \"updatedAt\": \"2024-01-01T00:00:00.000Z\"\n}"
				}
			]
		},
		{
			"name": "Get All Users",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users?page={{page_number}}&limit={{page_size}}&sort=updatedAt&order=DESC",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "{{page_number}}",
							"description": "Número da página"
						},
						{
							"key": "limit",
							"value": "{{page_size}}",
							"description": "Quantidade de itens por página"
						},
						{
							"key": "q",
							"value": "",
							"description": "Termo de busca (nome, email)",
							"disabled": true
						},
						{
							"key": "role",
							"value": "",
							"description": "Filtrar por role (admin, teacher, leader, user)",
							"disabled": true
						},
						{
							"key": "active",
							"value": "",
							"description": "Filtrar por status ativo (true/false)",
							"disabled": true
						},
						{
							"key": "completed",
							"value": "",
							"description": "Filtrar por status completo (true/false)",
							"disabled": true
						},
						{
							"key": "sort",
							"value": "updatedAt",
							"description": "Campo para ordenação"
						},
						{
							"key": "order",
							"value": "DESC",
							"description": "Ordem (ASC/DESC)"
						}
					]
				},
				"description": "Endpoint para listar todos os usuários com paginação e filtros (requer autenticação de admin)"
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar se a resposta foi bem-sucedida",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verificar se a resposta contém dados paginados",
							"pm.test(\"Response has paginated data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.exist;",
							"    pm.expect(jsonData.total).to.exist;",
							"    pm.expect(jsonData.page).to.exist;",
							"    pm.expect(jsonData.limit).to.exist;",
							"});",
							"",
							"// Verificar se há usuários na resposta",
							"pm.test(\"Response has users array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.be.an('array');",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    console.log(\"Usuários encontrados: \" + jsonData.data.length);",
							"    console.log(\"Total: \" + jsonData.total);",
							"    console.log(\"Página: \" + jsonData.page + \" de \" + jsonData.pageCount);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": [
				{
					"name": "Get All Users Success",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users?page=1&limit=10&sort=updatedAt&order=DESC",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "sort",
									"value": "updatedAt"
								},
								{
									"key": "order",
									"value": "DESC"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"data\": [\n    {\n      \"id\": \"user_id_1\",\n      \"name\": \"Admin User\",\n      \"email\": \"admin@example.com\",\n      \"phone\": \"+5511999999999\",\n      \"role\": \"admin\",\n      \"active\": true,\n      \"completed\": true,\n      \"commonUser\": false,\n      \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n      \"updatedAt\": \"2024-01-01T00:00:00.000Z\"\n    }\n  ],\n  \"total\": 1,\n  \"page\": 1,\n  \"limit\": 10,\n  \"pageCount\": 1\n}"
				}
			]
		},
		{
			"name": "Get User by ID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				},
				"description": "Endpoint para obter um usuário específico por ID (requer autenticação de admin)"
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar se a resposta foi bem-sucedida",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verificar se a resposta contém dados do usuário",
							"pm.test(\"Response has user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.exist;",
							"    pm.expect(jsonData.name).to.exist;",
							"    pm.expect(jsonData.email).to.exist;",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    console.log(\"Usuário encontrado: \" + jsonData.name);",
							"    console.log(\"Email: \" + jsonData.email);",
							"    console.log(\"Role: \" + jsonData.role);",
							"    console.log(\"Ativo: \" + jsonData.active);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": [
				{
					"name": "Get User Success",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"id\": \"user_id_here\",\n  \"name\": \"Admin User\",\n  \"email\": \"admin@example.com\",\n  \"phone\": \"+5511999999999\",\n  \"role\": \"admin\",\n  \"active\": true,\n  \"completed\": true,\n  \"commonUser\": false,\n  \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n  \"updatedAt\": \"2024-01-01T00:00:00.000Z\"\n}"
				}
			]
		},
		{
			"name": "Update User",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"João Silva Atualizado\",\n  \"email\": \"joao.silva.novo@example.com\",\n  \"phone\": \"+5511888888888\",\n  \"role\": \"leader\",\n  \"active\": true,\n  \"completed\": true,\n  \"commonUser\": false\n}"
				},
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				},
				"description": "Endpoint para atualizar um usuário específico (requer autenticação de admin)"
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar se a resposta foi bem-sucedida",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verificar se a resposta contém dados atualizados",
							"pm.test(\"Response has updated user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.exist;",
							"    pm.expect(jsonData.name).to.exist;",
							"    pm.expect(jsonData.email).to.exist;",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    console.log(\"Usuário atualizado com sucesso!\");",
							"    console.log(\"ID: \" + jsonData.id);",
							"    console.log(\"Nome: \" + jsonData.name);",
							"    console.log(\"Email: \" + jsonData.email);",
							"    console.log(\"Role: \" + jsonData.role);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": [
				{
					"name": "Update User Success",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"João Silva Atualizado\",\n  \"email\": \"joao.silva.novo@example.com\",\n  \"phone\": \"+5511888888888\",\n  \"role\": \"leader\",\n  \"active\": true,\n  \"completed\": true,\n  \"commonUser\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"id\": \"user_id_here\",\n  \"name\": \"João Silva Atualizado\",\n  \"email\": \"joao.silva.novo@example.com\",\n  \"phone\": \"+5511888888888\",\n  \"role\": \"leader\",\n  \"active\": true,\n  \"completed\": true,\n  \"commonUser\": false,\n  \"createdAt\": \"2024-01-01T00:00:00.000Z\",\n  \"updatedAt\": \"2024-01-01T12:00:00.000Z\"\n}"
				}
			]
		},
		{
			"name": "Delete User",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id}}"
					]
				},
				"description": "Endpoint para deletar um usuário específico (requer autenticação de admin)"
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar se a resposta foi bem-sucedida",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verificar se a resposta contém mensagem de sucesso",
							"pm.test(\"Response has success message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.exist;",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    console.log(\"Usuário deletado com sucesso!\");",
							"    console.log(\"Mensagem: \" + jsonData.message);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": [
				{
					"name": "Delete User Success",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [],
					"cookie": [],
					"body": "{\n  \"message\": \"Usuário removido com sucesso\"\n}"
				}
			]
		},
		{
			"name": "Search Users",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/users?q={{search_term}}&role={{user_role}}&active=true&page={{page_number}}&limit={{page_size}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "q",
							"value": "admin",
							"description": "Termo de busca"
						},
						{
							"key": "role",
							"value": "admin",
							"description": "Filtrar por role"
						},
						{
							"key": "active",
							"value": "true",
							"description": "Filtrar por status ativo"
						},
						{
							"key": "page",
							"value": "1",
							"description": "Página"
						},
						{
							"key": "limit",
							"value": "5",
							"description": "Limite por página"
						}
					]
				},
				"description": "Endpoint para buscar usuários com filtros específicos (requer autenticação de admin)"
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar se a resposta foi bem-sucedida",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Verificar se a resposta contém dados paginados",
							"pm.test(\"Response has paginated data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.data).to.exist;",
							"    pm.expect(jsonData.total).to.exist;",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    console.log(\"Busca realizada com sucesso!\");",
							"    console.log(\"Usuários encontrados: \" + jsonData.data.length);",
							"    console.log(\"Total: \" + jsonData.total);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"response": [
				{
					"name": "Sucesso - Usuário Criado",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"João Silva\",\n  \"email\": \"joao.silva.teacher.1@example.com\",\n  \"password\": \"password123\",\n  \"phone\": \"+5511999999999\",\n  \"role\": \"teacher\",\n  \"completed\": true,\n  \"commonUser\": false,\n  \"active\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"uuid-user-created\",\n  \"name\": \"João Silva\",\n  \"email\": \"joao.silva.teacher.1@example.com\",\n  \"phone\": \"+5511999999999\",\n  \"role\": \"teacher\",\n  \"active\": true,\n  \"completed\": true,\n  \"commonUser\": false,\n  \"createdAt\": \"2025-09-27T21:00:00.000Z\",\n  \"updatedAt\": \"2025-09-27T21:00:00.000Z\"\n}"
				},
				{
					"name": "Erro - Dados Inválidos",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"\",\n  \"email\": \"email-invalido\",\n  \"password\": \"123\",\n  \"phone\": \"\",\n  \"role\": \"invalid-role\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"statusCode\": 400,\n  \"message\": [\n    \"name should not be empty\",\n    \"email must be an email\",\n    \"password must be longer than or equal to 6 characters\",\n    \"phone should not be empty\",\n    \"role must be one of the following values: teacher, leader, admin\"\n  ],\n  \"error\": \"Bad Request\"\n}"
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"description": "URL base da API"
		},
		{
			"key": "access_token",
			"value": "",
			"description": "Token de acesso JWT"
		},
		{
			"key": "user_id",
			"value": "",
			"description": "ID do usuário para testes"
		},
		{
			"key": "created_user_id",
			"value": "",
			"description": "ID do usuário criado"
		}
	]
}
