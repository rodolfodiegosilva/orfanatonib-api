name: Deploy Staging Clubinho API

on:
  push:
    branches: [ "staging" ]

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üõ† Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: üì¶ Install dependencies
        run: npm install

      - name: ‚úÖ Run tests
        run: npm test

      - name: üèó Build project
        run: npm run build

      - name: üì§ Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üê≥ Build Docker image (staging)
        run: docker build -t diegoseven/clubinho-api:staging -f DockerFile .

      - name: ‚¨Ü Push Docker image
        run: docker push diegoseven/clubinho-api:staging

  deploy:
    name: Deploy to Staging EC2
    needs: build
    runs-on: [self-hosted, staging]

    steps:
      - name: üöÄ Start Docker if needed
        run: sudo systemctl start docker

      - name: üßº Remove old container (if any)
        run: |
          if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^clubinho-api-staging$"; then
            echo "üîÅ Removendo container antigo..."
            sudo docker rm -f clubinho-api-staging
          else
            echo "‚úÖ Nenhum container antigo encontrado"
          fi

      - name: üßº Remove old image (if any)
        run: |
          if sudo docker images --format '{{.Repository}}:{{.Tag}}' | grep -q "^diegoseven/clubinho-api:staging$"; then
            echo "üîÅ Removendo imagem antiga..."
            sudo docker rmi -f diegoseven/clubinho-api:staging
          else
            echo "‚úÖ Nenhuma imagem antiga encontrada"
          fi

      - name: ‚¨á Pull new image from Docker Hub
        run: sudo docker pull diegoseven/clubinho-api:staging

      - name: üèÉ Run new container
        run: |
          sudo docker run -d --restart=always -p 3001:3000 \
            -e ENVIRONMENT=${{ secrets.STAGING_ENVIRONMENT }} \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_PORT=${{ secrets.DB_PORT }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.STAGING_DB_NAME }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }} \
            -e SES_DEFAULT_FROM=${{ secrets.STAGING_SES_DEFAULT_FROM }} \
            -e SES_DEFAULT_TO=${{ secrets.STAGING_SES_DEFAULT_TO }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e JWT_EXPIRES_IN=${{ secrets.JWT_EXPIRES_IN }} \
            -e JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }} \
            -e JWT_REFRESH_EXPIRES_IN=${{ secrets.JWT_REFRESH_EXPIRES_IN }} \
            -e TWILIO_ACCOUNT_SID=${{ secrets.STAGING_TWILIO_ACCOUNT_SID }} \
            -e TWILIO_AUTH_TOKEN=${{ secrets.STAGING_TWILIO_AUTH_TOKEN }} \
            -e TWILIO_WHATSAPP_FROM=${{ secrets.STAGING_TWILIO_WHATSAPP_FROM }} \
            -e TWILIO_WHATSAPP_TO=${{ secrets.STAGING_TWILIO_WHATSAPP_TO }} \
            -e FEED_CLUBINHO_PAGE_ID=${{ secrets.STAGING_FEED_CLUBINHO_PAGE_ID }} \
            --name clubinho-api-staging diegoseven/clubinho-api:staging
